{"version":3,"sources":["components/TableHead.js","components/TableBody.js","components/Table.js","components/From.js","App.js","serviceWorker.js","index.js"],"names":["TableHead","props","tds","theadData","map","item","index","key","TableBody","rows","sdata","name","fen","onClick","removeCharacter","Table","this","Component","From","handleChange","event","target","value","setState","submitForm","console","log","handleSubmit","state","initaiState","type","onChange","App","arr","filter","i","obj","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8RAmBeA,G,MAjBG,SAACC,GAGf,IAAMC,EAAMD,EAAME,UAAUC,IAAI,SAACC,EAAKC,GAClC,OACI,wBAAIC,IAAKD,GAAT,IAAkBD,KAG1B,OACG,+BACI,4BACCH,MCMGM,EAjBG,SAAAP,GACd,IAAMQ,EAAOR,EAAMS,MAAMN,IAAI,SAACC,EAAOC,GACjC,OACI,wBAAIC,IAAKD,GACL,4BAAKD,EAAKM,MACV,4BAAKN,EAAKO,KACV,4BAAI,4BAAQC,QAAS,kBAAMZ,EAAMa,gBAAgBR,KAA7C,cAIhB,OACI,+BACKG,ICCEM,E,iLAXH,IAAD,EACsCC,KAAKf,MAA1CS,EADD,EACCA,MAAOP,EADR,EACQA,UAAUW,EADlB,EACkBA,gBACzB,OACE,+BACE,kBAAC,EAAD,CAAWX,UAAYA,IACvB,kBAAC,EAAD,CAAWO,MAAOA,EAAQI,gBAAiBA,S,GAN/BG,a,OCDCC,E,YACjB,WAAYjB,GAAO,IAAD,8BACd,4CAAMA,KAQVkB,aAAe,SAAAC,GAAU,IAAD,EACIA,EAAMC,OAAtBV,EADY,EACZA,KAAMW,EADM,EACNA,MACd,EAAKC,SAAL,eACKZ,EAAOW,KAZE,EAgBlBE,WAAa,WACTC,QAAQC,IAAI,EAAKzB,OACjB,EAAKA,MAAM0B,aAAa,EAAKC,OAC7B,EAAKL,SAAS,EAAKM,cAhBnB,EAAKA,YAAY,CACblB,KAAK,GACLC,IAAI,IAER,EAAKgB,MAAQ,EAAKC,YAPJ,E,sEAsBR,IAAD,EACiBb,KAAKY,MAAnBjB,EADH,EACGA,KAAMC,EADT,EACSA,IAEd,OACI,8BACA,+CACA,2BACIkB,KAAK,OACLnB,KAAK,OACLW,MAAOX,EACPoB,SAAUf,KAAKG,eACf,6BACJ,+CACA,2BACIW,KAAK,OACLnB,KAAK,MACLW,MAAOV,EACPmB,SAAUf,KAAKG,eACf,6BACA,2BAAOW,KAAK,SAASR,MAAM,SAAST,QAASG,KAAKQ,kB,GA1ChCP,aCEbe,E,2MACnBJ,MAAQ,CACNK,IAAK,CACH,CACEtB,KAAK,eACLC,IAAI,IAEN,CACED,KAAK,eACLC,IAAI,M,EAIVE,gBAAkB,SAAAR,GAAU,IAClB2B,EAAQ,EAAKL,MAAbK,IACR,EAAKV,SAAS,CACZU,IAAKA,EAAIC,OAAO,SAACD,EAAKE,GACpB,OAAOA,IAAM7B,O,EAInBqB,aAAe,SAAAS,GACb,EAAKb,SAAS,CAAEU,IAAI,GAAD,mBAAM,EAAKL,MAAMK,KAAjB,CAAsBG,O,wEAGzC,IACQH,EAAQjB,KAAKY,MAAbK,IACR,OACE,yBAAKI,UAAU,OACf,4BAAQA,UAAU,cAChB,kBAAC,EAAD,CAAO3B,MAASuB,EAAK9B,UALT,CAAC,eAAO,kBAKuBW,gBAAiBE,KAAKF,kBACjE,kBAAC,EAAD,CAAMa,aAAcX,KAAKW,qB,GA/BAV,aCQbqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6f8172db.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst TableHead = (props) => {\r\n    // console.log(props.theadData);\r\n    // const {theadData} = this.props;\r\n    const tds = props.theadData.map((item,index)=>{\r\n        return (\r\n            <td key={index}> {item}</td>\r\n        )\r\n    })\r\n    return (\r\n       <thead>\r\n           <tr>\r\n           {tds}\r\n           </tr>\r\n       </thead>\r\n    );\r\n}\r\n\r\nexport default TableHead;\r\n","import React from 'react';\r\n\r\nconst TableBody = props => {\r\n    const rows = props.sdata.map((item , index)=>{\r\n        return (\r\n            <tr key={index}>\r\n                <td>{item.name}</td>\r\n                <td>{item.fen}</td>\r\n                <td><button onClick={() => props.removeCharacter(index)}>Delete</button></td>\r\n            </tr>\r\n        )\r\n        })\r\n    return (\r\n        <tbody>\r\n            {rows}\r\n        </tbody>\r\n    );\r\n}\r\n\r\nexport default TableBody;\r\n","import React, { Component } from 'react';\r\nimport TableHead from './TableHead'\r\nimport TableBody from './TableBody'\r\nclass Table extends Component {\r\n  render (){\r\n    const { sdata ,theadData,removeCharacter } = this.props;\r\n    return(\r\n      <table>\r\n        <TableHead theadData ={theadData} />\r\n        <TableBody sdata={sdata}  removeCharacter={removeCharacter} />\r\n      </table>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Table;","import React, { Component } from 'react'\r\n\r\nexport default class From extends Component {\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.initaiState={\r\n            name:'',\r\n            fen:'',\r\n        }\r\n        this.state = this.initaiState;\r\n    }\r\n    handleChange = event => {\r\n        const { name, value } = event.target\r\n        this.setState({\r\n            [name]: value,\r\n        })\r\n    }\r\n\r\n    submitForm = () => {\r\n        console.log(this.props)\r\n        this.props.handleSubmit(this.state)\r\n        this.setState(this.initaiState)\r\n    }\r\n\r\n    render() {\r\n        const { name, fen } = this.state;\r\n\r\n        return (\r\n            <form>\r\n            <label>姓名</label>\r\n            <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                value={name}\r\n                onChange={this.handleChange} />\r\n                <br/>\r\n            <label>分数</label>\r\n            <input\r\n                type=\"text\"\r\n                name=\"fen\"\r\n                value={fen}\r\n                onChange={this.handleChange} />\r\n                <br/>\r\n                <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './App.css';\r\nimport Table from './components/Table'\r\nimport From from './components/From'\r\nexport default class App extends Component {\r\n  state = {\r\n    arr: [\r\n      {\r\n        name:'张三',\r\n        fen:98\r\n      },\r\n      {\r\n        name:'李四',\r\n        fen:68\r\n      },\r\n    ]\r\n  }\r\n  removeCharacter = index => {\r\n    const { arr } = this.state\r\n    this.setState({\r\n      arr: arr.filter((arr, i) => {\r\n        return i !== index\r\n      }),\r\n    })\r\n  }\r\n  handleSubmit = obj => {\r\n    this.setState({ arr: [...this.state.arr, obj] })\r\n  }\r\n  render() {\r\n    const theadData=['姓名' , '成绩33'] ;\r\n    const { arr } = this.state\r\n    return (\r\n      <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Table sdata = {arr} theadData={theadData} removeCharacter={this.removeCharacter}  />\r\n        <From handleSubmit={this.handleSubmit} />\r\n      </header>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}